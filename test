인공지능 안에 머신러닝 그 안에 딥러닝 

딥러닝 실행을 위해 필요한 3가지
컴퓨터, 데이터, 프로그램 

지도학습:이름표(클래스) 주어진 데이터로 학습
비지도학습:이름표 없는 데이터로 학습 

퍼셉트론:신경세포를 흉내 낸 프로그램
외부 자극을 x1, x2와 같은 수치값으로 할당 한 후 이 수치값을 w1, w2의 가중치(파라미터)에 곱한 신호의 값을 구함 

임계값: 신호 합산 값을 퍼셉트론에 전달 할지 말지를 정하기 위한 상수
OR회로 이용해 true(1) 이 나올 경우 신호 전달 

논리회로, 논리 게이트:논리 연산을 수행하는 전자기 회로 

부울 대수:사진
퍼셉트론 선구자:워런 매컬러, 윌터 피츠 

인공신경망은 오차를 줄이는 최적화(연결 강도 조정) 

퍼셉트론의 한계:xor 연산 구현 불가
(선형 함수가 아니여서)
(1차 인공지능 겨울 원인) 

머신 러닝:데이터 안에서 규칙을 발견하고 그 규칙을 새로운 데이터에 적용해서 새로운 결과를 도출해 아직 일어나지 않은 일을 예측 

예측 성공을 위해 경계선을 그음 

딥러닝을 위해 속성과 클래스 지정 

텐서플로:딥러닝을 위한 라이브러리
케라스:텐서플로 쉽게 사용 도와줌


딥러닝은 여러 층으로 구성
(이 층들을 여러번 거침)
(model.fit() :오가는 횟수, 사용할 데이터 양 지정 함수) 

선형 회귀
정보=독립 변수
정보에 따라 변화는 값=종속 변수
하나의 독립 변수로 종속변수를 설명할수 있다면 단순 선형회귀, 여러개 필요하다면 다중 선형회귀 

기울기와 y절편을 정확히 알아내는것이 중요
최소제곱법 : y = ax + b
갤러리(기울기 구하는 식)
y절편 구하는 식
y절편=종속변수의 평균-(독립변수의 평균×기울기) 

numpy 배열
np.array([1, 2, 3, 4]) 

np.mean(x) : x의 평균
def : 함수를 만들때 사용하는 예약어
len() : 리스트 안에 있는 원소 개수
range() : 0부터 괄호 안의 숫자 전까지 연속적인 숫자 객체를 만들어 줌
( range(3) 은 0, 1, 2 ) 

평균 제곱 오차
그은 선이 실제 값과 오차가 적을수록 적합한 선 

오차를 계산 할 땐 오차값을 제곱 한 후 더하고 원소 개수로 나눔 

경사 하강법
이차 함수 그래프의 가장 아래 최솟값 지점이 오차가 가장 적음
기울기가 0이여서 미분 값이 0인 지점을 찾아야 함
반복적으로 기울기를 변화시켜서 미분 값이 0인 지점을 찾아내는 것 

다중 선형 회귀
식=갤러리
선을 넘어 평면으로 범위가 넓어짐 

머신 러닝에서는 문제 해결을 위해 가정하는 식을 가설 함수H(x)로 표기
기울기는 가중치 w로 표시
절편은 편향 b로 표시
머신 러닝 표기식
H(x) = wx + b
평균 제곱 오차에 대한 식은 손실 함수라고 함
경가 하강법은 옵티마이저 라고 함 

activation : 활성화 함수 설정
(입력된 값을 다음 층으로 넘길 때 어떻게 처리할지를 결정하는 함수) 

로지스틱 회귀 모델
참, 거짓 중 하나로 답하는 원리
직선이 아닌 참과 거짓을 구분하는 s자 형태의 선
시그모이드 함수: 갤러리
a는 그래프의 경사도, b는 그래프의 좌우 이동을 의미
a값이나 b값이 작아지면 오차는 무한대로 커짐
(a값이 커져도 오차가 사라지진 않음) 

경사 하강법 사용할 것















파이썬
from : 모듈이나 패키지에서 특정 요소를 가져오는 키워드
import : 라이브러리 불러오기
as : 모듈 이름변경
numpy.loadtxt : 파일 읽기
("./data/데이터명.csv")
Sequential() : model.add()사용
Model.add() : 함수 한 줄 추가로 필요한 내부의 층 만들기
Dense() : 각 층의 입력과 출력을 촘촘하게 모두 연결
model.compile() : model 설정 실행
model.fit() : 몇번 오갈지, 몇 개의 데이터를 사용할 것인지 지정
np.array([1, 2, 3, 4]) : 원소 배열
np.mean(x) : 원소들의 평균을 구함
def : 함수 만들때 사용하는 예약어
len(리스트) : 리스트 안의 원소 개수
range() : 0부터 괄호 안의 숫자 전까지 연속적인 숫자 객체 만들어 줌
sum() : 합을 구함
epoch : 입력 값에 대해 몇 번 반복했는지 나타냄
activation : 활성화 함수를 정하는 옵션
model.predict : 결과 예측
